#!/bin/bash

#######################################################################################################################################
#######################################################################################################################################
#*/                                                   VARIANT CALLING HUMAN GENOME                                                  /*#
#######################################################################################################################################
#######################################################################################################################################

####################
### Activate the working environment
####################

#conda activate VariantCalling

####################
### Running the pipeline
####################

# in /home/Documents/Bioinformatique/variant_calling/ tape: ./notebooks/script_variant_calling.sh

####################
### Variable initialization
####################

WORK_DIR=. # working directory -> absolute way of the current (working) directory

####################
### Data collection
####################

# Data already downloaded

####################
### Unzip FASTQ files
####################

# gunzip $WORK_DIR/data/raw/reads.fastq.gz 

####################
### Quality control of the data
####################
echo "> quality control of the data"

if [[ ! -d $WORK_DIR/reports/QC ]]; then
    mkdir -p $WORK_DIR/reports/QC # to create all folders recursively
fi

# basename and without the extension
# for file in $WORK_DIR/data/raw/*.fastq; do 
#     fastq_file="$(basename -- $file)"
#     if [[ ! -f $WORK_DIR/reports/QC/${fastq_file%.*} ]]; then
#         fastqc ${file} -o $WORK_DIR/reports/QC/
#     fi
# done

for file in $WORK_DIR/data/raw/*.fastq; do 
    fastq_file="$(basename $file | sed 's/\.fastq/_fastqc/g')" 
    # takes the last part of the path, so the name of the FASTQ file
    html_file="$WORK_DIR/reports/QC/$fastq_file.html" 
    # path of the HTML file which will be generated by FASTQC
    zip_file="$WORK_DIR/reports/QC/$fastq_file.zip" 
    if [[ ! -f "$html_file" ]] || [[ ! -f "$zip_file" ]]; then # || : OR
        fastqc -o "$WORK_DIR/reports/QC/" "$file"
        #echo "$file, $fastq_file, $html_file, $zip_file"
        #if [[ -f $html_file ]]; then echo "OK html"; else echo "None html"; fi
        #if [[ -f $zip_file ]]; then echo "OK zip"; else echo "None zip"; fi
    fi
done

##################
### Trimming of the data
##################

##################
### MultiQC on FASTQ files
##################

# Maybe no need to perform the multiQC, as we have "only" one file

##################
### Indexing and mapping: BWA
##################
echo "> indexing and mapping using BWA"

if [ ! -d $WORK_DIR/data/interm/ ]; then
    mkdir -p $WORK_DIR/data/interm
fi

if [[ ! -f $WORK_DIR/data/interm/db.bwt ]]; then
    bwa index db $WORK_DIR/data/raw/ref.fa
fi

if [ ! -d $WORK_DIR/reports/bwa_alignment ]; then
    mkdir -p $WORK_DIR/reports/bwa_alignment
fi

if [[ ! -f $WORK_DIR/reports/bwa_alignment/aln_output.sam ]]; then
    bwa mem "@RG\tID:1\tPL:ILLUMINA\tSM:HG002" $WORK_DIR/data/interm/db $WORK_DIR/data/raw/reads.fastq \
        | samtools view -h -r "HG002" \
        | samtools sort -o $WORK_DIR/reports/bwa_alignment/aln_output.sam 
    # > $WORK_DIR/reports/bwa_alignment/aln_output.sam        
fi

if [[ ! -f $WORK_DIR/reports/bwa_alignment/aln_output.bam ]]; then
    bwa mem -R "@RG\tID:1\tPL:ILLUMINA\tSM:HG002" $WORK_DIR/data/interm/db $WORK_DIR/data/raw/reads.fastq \
        | samtools view -bS -h \
        | samtools sort -o $WORK_DIR/reports/bwa_alignment/aln_output.bam 
    # > $WORK_DIR/reports/bwa_alignment/aln_output.sam        
fi

if [[ ! -f $WORK_DIR/reports/bwa_alignment/aln_output.bam.bai ]]; then
    samtools index $WORK_DIR/reports/bwa_alignment/aln_output.bam
fi

##################
### Variant calling: BCFtools 
##################

# Manipulates variant calls in VCF (and BCF) formats
echo "> run bcftools mpileup"

if [ ! -d $WORK_DIR/reports/vcf ]; then
    mkdir -p $WORK_DIR/reports/vcf
fi

if [[ ! -f $WORK_DIR/reports/vcf/aln_output_calls.vcf.gz ]]; then
    bcftools mpileup -Ou -Q 20 -f $WORK_DIR/data/raw/ref.fa $WORK_DIR/reports/bwa_alignment/aln_output.bam \
        | bcftools call -mv -Oz -o $WORK_DIR/reports/vcf/aln_output_calls.vcf.gz
fi

echo "> run bcftools index"

if [[ ! -f $WORK_DIR/reports/vcf/aln_output_calls.vcf.gz.csi ]]; then
    bcftools index $WORK_DIR/reports/vcf/aln_output_calls.vcf.gz
fi

echo "> run bcftools norm"

if [ ! -d $WORK_DIR/reports/norm ]; then
    mkdir -p $WORK_DIR/reports/norm
fi

if [ ! -f $WORK_DIR/reports/norm/aln_output_norm.norm.vcf.gz ]; then
    bcftools norm -f $WORK_DIR/data/raw/ref.fa $WORK_DIR/reports/vcf/aln_output_calls.vcf.gz \
        -Oz -o $WORK_DIR/reports/norm/aln_output_norm.norm.vcf.gz
fi

echo "> run bcftools filter"

if [ ! -d $WORK_DIR/reports/filter ]; then
    mkdir -p $WORK_DIR/reports/filter
fi

START=2
END=100
STEP=4

for i in $(seq $START $STEP $END); do
    if [ ! -f $WORK_DIR/reports/filter/aln_output_norm_${i}.norm.flt-indels.vcf.gz ]; then
        bcftools filter --IndelGap $i $WORK_DIR/reports/norm/aln_output_norm.norm.vcf.gz \
            -Oz -o $WORK_DIR/reports/filter/aln_output_norm_${i}.norm.flt-indels.vcf.gz
    fi
done

##################
### Statistical analysis
##################
echo "> run filter analysis: counting the number of variants per VCF file"

START=2
END=100
STEP=4

echo "threshold,count" > $WORK_DIR/reports/filter/vcf_stats.csv

c=$(cat $WORK_DIR/reports/norm/aln_output_norm.norm.vcf.gz | gunzip | grep -v '^#' | wc -l)
echo "0,$c" >> $WORK_DIR/reports/filter/vcf_stats.csv # >>: to add sthing at the end of the file

for i in $(seq $START $STEP $END); do
    c=$(bcftools filter --IndelGap $i $WORK_DIR/reports/norm/aln_output_norm.norm.vcf.gz \
        | grep -v '^#' | wc -l)
    echo "$i,$c" >> $WORK_DIR/reports/filter/vcf_stats.csv # >>: to add sthing at the end of the file
done
